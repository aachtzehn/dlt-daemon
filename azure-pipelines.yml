# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: CMake@1
  displayName: Creating configuration.
  inputs:
    cmakeArgs: -DWITH_DLT_UNIT_TESTS=ON ..
- task: CMake@1
  displayName: Building.
  inputs:
    cmakeArgs: --build . 
- task: CopyFiles@2
  displayName: Copying files for test runs.
  inputs:
    SourceFolder: $(Build.Repository.LocalPath)/tests
    Contents: 'test*'
    TargetFolder: $(Build.Repository.LocalPath)/  
- task: CmdLine@2
  displayName: "Unit test: dlt_daemon_common"
  continueOnError: true 
  inputs:
    script: $(Build.Repository.LocalPath)/build/tests/gtest_dlt_daemon_common --gtest_output=xml:$(Build.Repository.LocalPath)/build/tests/test.xml
- task: CmdLine@2
  displayName: "Unit test: dlt_common"
  continueOnError: true
  inputs:
    script: $(Build.Repository.LocalPath)/build/tests/gtest_dlt_common --gtest_output=xml:$(Build.Repository.LocalPath)/build/tests/test2.xml
- task: CmdLine@2
  displayName: "Unit test: dlt_daemon_event_handler"
  continueOnError: true
  inputs:
    script: $(Build.Repository.LocalPath)/build/tests/gtest_dlt_daemon_event_handler --gtest_output=xml:$(Build.Repository.LocalPath)/build/tests/test3.xml
- task: CmdLine@2
  displayName: "Unit test: dlt_daemon_gateway"
  continueOnError: true
  inputs:
    script: $(Build.Repository.LocalPath)/build/tests/gtest_dlt_daemon_gateway --gtest_output=xml:$(Build.Repository.LocalPath)/build/tests/test5.xml

- task: CmdLine@2
  displayName: "Unit test: dlt_daemon_offline_logstorage"
  continueOnError: true
  inputs:
    script: $(Build.Repository.LocalPath)/build/tests/gtest_dlt_daemon_offline_log --gtest_output=xml:$(Build.Repository.LocalPath)/build/tests/test5.xml
- task: CmdLine@2
  displayName: "Unit test: dlt_user"
  continueOnError: true
  inputs:
    script: $(Build.Repository.LocalPath)/build/tests/gtest_dlt_user --gtest_output=xml:$(Build.Repository.LocalPath)/build/tests/test6.xml
- task: CmdLine@2
  displayName: "Unit test: dlt_env_ll_unit_test"
  continueOnError: true
  inputs:
    script: $(Build.Repository.LocalPath)/build/tests/dlt_env_ll_unit_test --gtest_output=xml:$(Build.Repository.LocalPath)/build/tests/test7.xml
- task: PublishTestResults@2
  displayName: Publishing test results.
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/test*.xml'
    mergeTestResults: true
    testRunTitle: 'dlt-daemon tests'
- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_aachtzehn'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: $(Build.BuildNumber)
    title: 'My release: $(Build.BuildNumber)'
    assets: |
      $(Build.Repository.LocalPath)/build/src/console/dlt-*
      $(Build.Repository.LocalPath)/build/src/daemon/dlt-*
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
- task: ArtifactoryGenericUpload@2
  inputs:
    artifactoryService: 'artifactory'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "$(Build.Repository.LocalPath)/build/",
            "target": "/"
          }
        ]
      }
    failNoOp: true